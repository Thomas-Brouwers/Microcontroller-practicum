
opdracht 3B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd0  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a4  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000510  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c2  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025e  00000000  00000000  0000240e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	65 d0       	rcall	.+202    	; 0x17e <main>
  b4:	80 c0       	rjmp	.+256    	; 0x1b6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
{
	PORTC |= (1<<LCD_E);	// E high
  b8:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_strobe_lcd_e+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_strobe_lcd_e+0xc>
  c4:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_strobe_lcd_e+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_strobe_lcd_e+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
{
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
  da:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
  dc:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
  de:	ec df       	rcall	.-40     	; 0xb8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
  e0:	c2 95       	swap	r28
  e2:	c0 7f       	andi	r28, 0xF0	; 240
  e4:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
  e6:	aa 9a       	sbi	0x15, 2	; 21
  e8:	e7 df       	rcall	.-50     	; 0xb8 <lcd_strobe_lcd_e>
}
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <display_text>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
  f4:	88 81       	ld	r24, Y
  f6:	88 23       	and	r24, r24
  f8:	31 f0       	breq	.+12     	; 0x106 <display_text+0x18>
  fa:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_data(*str);
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	eb df       	rcall	.-42     	; 0xd6 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 100:	89 91       	ld	r24, Y+
 102:	81 11       	cpse	r24, r1
 104:	fb cf       	rjmp	.-10     	; 0xfc <display_text+0xe>
		lcd_write_data(*str);
	}
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_command>:
	_delay_ms(1);			// nodig?
}

void lcd_command ( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
 10c:	98 2f       	mov	r25, r24
 10e:	90 7f       	andi	r25, 0xF0	; 240
 110:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
 112:	ab 9a       	sbi	0x15, 3	; 21
 114:	ef ec       	ldi	r30, 0xCF	; 207
 116:	f7 e0       	ldi	r31, 0x07	; 7
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_command+0xc>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_command+0x12>
 11e:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
 124:	f0 e1       	ldi	r31, 0x10	; 16
 126:	8f 9f       	mul	r24, r31
 128:	c0 01       	movw	r24, r0
 12a:	11 24       	eor	r1, r1
 12c:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
 12e:	ab 9a       	sbi	0x15, 3	; 21
 130:	8f ec       	ldi	r24, 0xCF	; 207
 132:	97 e0       	ldi	r25, 0x07	; 7
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_command+0x28>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_command+0x2e>
 13a:	00 00       	nop
	// start (EN=1)
	_delay_ms(1); // wait 1 ms
	PORTC = 0x00; // stop
 13c:	15 ba       	out	0x15, r1	; 21
 13e:	08 95       	ret

00000140 <init>:

#define LCD_E 	3
#define LCD_RS	2

void init(void)
{
 140:	cf 93       	push	r28
	DDRC = 0xFF;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 146:	15 ba       	out	0x15, r1	; 21
	
	lcd_command(0x01); //clear display
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	df df       	rcall	.-66     	; 0x10c <lcd_command>

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 14e:	c0 e2       	ldi	r28, 0x20	; 32
	lcd_strobe_lcd_e();
 150:	c5 bb       	out	0x15, r28	; 21

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 152:	b2 df       	rcall	.-156    	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 154:	c5 bb       	out	0x15, r28	; 21
	PORTC = 0x80;
 156:	b0 df       	rcall	.-160    	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
	lcd_strobe_lcd_e();
 15c:	ad df       	rcall	.-166    	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 15e:	15 ba       	out	0x15, r1	; 21
 160:	ab df       	rcall	.-170    	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 162:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 164:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 166:	a8 df       	rcall	.-176    	; 0xb8 <lcd_strobe_lcd_e>
 168:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 16a:	a6 df       	rcall	.-180    	; 0xb8 <lcd_strobe_lcd_e>
 16c:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 16e:	85 bb       	out	0x15, r24	; 21
 170:	a3 df       	rcall	.-186    	; 0xb8 <lcd_strobe_lcd_e>

}
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <set_cursor>:
}

void set_cursor(int position)
{
	//for (int i = 0; i<position;i++){
	lcd_command(0x80 + position);
 176:	80 58       	subi	r24, 0x80	; 128
 178:	9f 4f       	sbci	r25, 0xFF	; 255
 17a:	c8 cf       	rjmp	.-112    	; 0x10c <lcd_command>
 17c:	08 95       	ret

0000017e <main>:


int main( void )
{
	// Init I/O
	DDRD = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	81 bb       	out	0x11, r24	; 17

	init();
 182:	de df       	rcall	.-68     	; 0x140 <init>
	
	set_cursor(9);
 184:	89 e0       	ldi	r24, 0x09	; 9
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	f6 df       	rcall	.-20     	; 0x176 <set_cursor>
	display_text("_");
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	af df       	rcall	.-162    	; 0xee <display_text>
	set_cursor(40);
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	f0 df       	rcall	.-32     	; 0x176 <set_cursor>
	display_text("HALLO ETIENNE");
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	a9 df       	rcall	.-174    	; 0xee <display_text>
 19c:	82 b3       	in	r24, 0x12	; 18
		
	
	while (1)
	{
		PORTD ^= (1<<7);	// Toggle PORTD.7
 19e:	80 58       	subi	r24, 0x80	; 128
 1a0:	82 bb       	out	0x12, r24	; 18
 1a2:	2f e7       	ldi	r18, 0x7F	; 127
 1a4:	8a e1       	ldi	r24, 0x1A	; 26
 1a6:	96 e0       	ldi	r25, 0x06	; 6
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x2a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x34>
 1b2:	00 00       	nop
 1b4:	f3 cf       	rjmp	.-26     	; 0x19c <main+0x1e>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
