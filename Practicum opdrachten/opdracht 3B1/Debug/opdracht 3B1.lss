
opdracht 3B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000164  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4b  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087d  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e1  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b8  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cb  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000205b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	43 d0       	rcall	.+134    	; 0x13a <main>
  b4:	55 c0       	rjmp	.+170    	; 0x160 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:

	// Second nibble
	PORTC = (byte<<4);
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
}
  b8:	ab 9a       	sbi	0x15, 3	; 21
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_strobe_lcd_e+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_strobe_lcd_e+0xc>
  c4:	00 00       	nop
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_strobe_lcd_e+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_strobe_lcd_e+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <init_4bits_mode>:
  d6:	cf 93       	push	r28
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 bb       	out	0x14, r24	; 20
  dc:	15 ba       	out	0x15, r1	; 21
  de:	c0 e2       	ldi	r28, 0x20	; 32
  e0:	c5 bb       	out	0x15, r28	; 21
  e2:	ea df       	rcall	.-44     	; 0xb8 <lcd_strobe_lcd_e>
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	e8 df       	rcall	.-48     	; 0xb8 <lcd_strobe_lcd_e>
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	e5 df       	rcall	.-54     	; 0xb8 <lcd_strobe_lcd_e>
  ee:	15 ba       	out	0x15, r1	; 21
  f0:	e3 df       	rcall	.-58     	; 0xb8 <lcd_strobe_lcd_e>
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	e0 df       	rcall	.-64     	; 0xb8 <lcd_strobe_lcd_e>
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	de df       	rcall	.-68     	; 0xb8 <lcd_strobe_lcd_e>
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	85 bb       	out	0x15, r24	; 21
 100:	db df       	rcall	.-74     	; 0xb8 <lcd_strobe_lcd_e>
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <lcd_write_data>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	d4 df       	rcall	.-88     	; 0xb8 <lcd_strobe_lcd_e>
 110:	c2 95       	swap	r28
 112:	c0 7f       	andi	r28, 0xF0	; 240
 114:	c5 bb       	out	0x15, r28	; 21
 116:	aa 9a       	sbi	0x15, 2	; 21
 118:	cf df       	rcall	.-98     	; 0xb8 <lcd_strobe_lcd_e>
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <lcd_write_string>:
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	88 81       	ld	r24, Y
 126:	88 23       	and	r24, r24
 128:	29 f0       	breq	.+10     	; 0x134 <lcd_write_string+0x16>
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	ec df       	rcall	.-40     	; 0x106 <lcd_write_data>
 12e:	89 91       	ld	r24, Y+
 130:	81 11       	cpse	r24, r1
 132:	fc cf       	rjmp	.-8      	; 0x12c <lcd_write_string+0xe>
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <main>:
notes:			Slow background task after init ISR
Version :    	DMK, Initial code
*******************************************************************/
{
	// Init I/O
	DDRD = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	81 bb       	out	0x11, r24	; 17

	// Init LCD
	init_4bits_mode();
 13e:	cb df       	rcall	.-106    	; 0xd6 <init_4bits_mode>

	// Write sample string
	lcd_write_string("Test");
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	ec df       	rcall	.-40     	; 0x11e <lcd_write_string>

	// Loop forever
	while (1)
	{
		PORTD ^= (1<<7);	// Toggle PORTD.7
 146:	82 b3       	in	r24, 0x12	; 18
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f e7       	ldi	r18, 0x7F	; 127
 14e:	8a e1       	ldi	r24, 0x1A	; 26
 150:	96 e0       	ldi	r25, 0x06	; 6
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x18>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x22>
 15c:	00 00       	nop
 15e:	f3 cf       	rjmp	.-26     	; 0x146 <main+0xc>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
