
opdracht 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000970  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fe  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001cc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	57 c0       	rjmp	.+174    	; 0x14a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <main>:
Version :    	DMK, Initial code
*******************************************************************/
{
	// set PORTD for output
	int fast = 0;
	DDRD = 0b11111111;					// PORTD.7 input all other bits output
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	81 bb       	out	0x11, r24	; 17
	DDRA = 0b11111111;	//PORTC = 0x10;						// ??
  c4:	8a bb       	out	0x1a, r24	; 26
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	// set PORTD for output
	int fast = 0;
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
			PORTD = 0x00;
			wait( 250 );
		}
		else if(fast == 0)
		{
			PORTD = 0x80;
  ca:	c0 e8       	ldi	r28, 0x80	; 128
			wait( 1000 );
			PORTD = 0x00;
			wait( 1000 );
  cc:	10 e0       	ldi	r17, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	ff 24       	eor	r15, r15
  d2:	f3 94       	inc	r15
  d4:	00 e0       	ldi	r16, 0x00	; 0
		}
		
		else if((PINC & 0x01) && fast == 0)
		{
			fast = 1;	
			PORTA = 0x01;
  d6:	ee 24       	eor	r14, r14
  d8:	e3 94       	inc	r14
	DDRA = 0b11111111;	//PORTC = 0x10;						// ??
	
	while (1)
	{
		
		if((PINC & 0x01) && fast == 1){
  da:	98 9b       	sbis	0x13, 0	; 19
  dc:	08 c0       	rjmp	.+16     	; 0xee <main+0x2e>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 05       	cpc	r25, r1
  e2:	49 f5       	brne	.+82     	; 0x136 <main+0x76>
			fast = 0;
			PORTA = 0x80;
  e4:	cb bb       	out	0x1b, r28	; 27
			wait(250);
  e6:	8a ef       	ldi	r24, 0xFA	; 250
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	d9 df       	rcall	.-78     	; 0x9e <wait>
  ec:	19 c0       	rjmp	.+50     	; 0x120 <main+0x60>
		}
		
		else if((PINC & 0x01) && fast == 0)
  ee:	98 9b       	sbis	0x13, 0	; 19
  f0:	07 c0       	rjmp	.+14     	; 0x100 <main+0x40>
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	19 f5       	brne	.+70     	; 0x13c <main+0x7c>
		{
			fast = 1;	
			PORTA = 0x01;
  f6:	eb ba       	out	0x1b, r14	; 27
			wait(1000);
  f8:	88 ee       	ldi	r24, 0xE8	; 232
  fa:	93 e0       	ldi	r25, 0x03	; 3
  fc:	d0 df       	rcall	.-96     	; 0x9e <wait>
  fe:	03 c0       	rjmp	.+6      	; 0x106 <main+0x46>
		}
		if(fast == 1)
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	91 05       	cpc	r25, r1
 104:	59 f4       	brne	.+22     	; 0x11c <main+0x5c>
		{
			PORTD = 0x80;
 106:	c2 bb       	out	0x12, r28	; 18
			wait( 250 );
 108:	8a ef       	ldi	r24, 0xFA	; 250
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	c8 df       	rcall	.-112    	; 0x9e <wait>
			PORTD = 0x00;
			wait( 250 );
 10e:	12 ba       	out	0x12, r1	; 18
 110:	8a ef       	ldi	r24, 0xFA	; 250
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	c4 df       	rcall	.-120    	; 0x9e <wait>
 116:	8f 2d       	mov	r24, r15
 118:	90 2f       	mov	r25, r16
 11a:	df cf       	rjmp	.-66     	; 0xda <main+0x1a>
		}
		else if(fast == 0)
 11c:	00 97       	sbiw	r24, 0x00	; 0
		{
			PORTD = 0x80;
 11e:	e9 f6       	brne	.-70     	; 0xda <main+0x1a>
			wait( 1000 );
 120:	c2 bb       	out	0x12, r28	; 18
 122:	88 ee       	ldi	r24, 0xE8	; 232
 124:	93 e0       	ldi	r25, 0x03	; 3
			PORTD = 0x00;
 126:	bb df       	rcall	.-138    	; 0x9e <wait>
			wait( 1000 );
 128:	12 ba       	out	0x12, r1	; 18
 12a:	88 ee       	ldi	r24, 0xE8	; 232
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	b7 df       	rcall	.-146    	; 0x9e <wait>
 130:	81 2f       	mov	r24, r17
 132:	9d 2f       	mov	r25, r29
 134:	d2 cf       	rjmp	.-92     	; 0xda <main+0x1a>
			fast = 0;
			PORTA = 0x80;
			wait(250);
		}
		
		else if((PINC & 0x01) && fast == 0)
 136:	98 99       	sbic	0x13, 0	; 19
 138:	05 c0       	rjmp	.+10     	; 0x144 <main+0x84>
 13a:	f0 cf       	rjmp	.-32     	; 0x11c <main+0x5c>
		{
			fast = 1;	
			PORTA = 0x01;
			wait(1000);
		}
		if(fast == 1)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	61 f6       	brne	.-104    	; 0xda <main+0x1a>
 142:	e1 cf       	rjmp	.-62     	; 0x106 <main+0x46>
			fast = 0;
			PORTA = 0x80;
			wait(250);
		}
		
		else if((PINC & 0x01) && fast == 0)
 144:	00 97       	sbiw	r24, 0x00	; 0
 146:	49 f6       	brne	.-110    	; 0xda <main+0x1a>
 148:	d6 cf       	rjmp	.-84     	; 0xf6 <main+0x36>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
