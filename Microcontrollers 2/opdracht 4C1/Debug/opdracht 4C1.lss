
opdracht 4C1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d55  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d4  00000000  00000000  000010dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ce  00000000  00000000  000019b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000513  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000227  00000000  00000000  0000249f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000026c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	94 d0       	rcall	.+296    	; 0x1c2 <main>
  9a:	d8 c0       	rjmp	.+432    	; 0x24c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
void displayOff()
{
 spi_slaveSelect(0); // Select display chip
 spi_write(0x0C); // Register 0B: Shutdown register
 spi_write(0x00); // -> 1 = Normal operation
 spi_slaveDeSelect(0); // Deselect display chip
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <spi_masterInit>:
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	bb 98       	cbi	0x17, 3	; 23
  c6:	c0 9a       	sbi	0x18, 0	; 24
  c8:	82 e5       	ldi	r24, 0x52	; 82
  ca:	8d b9       	out	0x0d, r24	; 13
  cc:	08 95       	ret

000000ce <spi_write>:
  ce:	8f b9       	out	0x0f, r24	; 15
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <spi_write+0x2>
  d4:	08 95       	ret

000000d6 <spi_slaveSelect>:
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <spi_slaveSelect+0xc>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <spi_slaveSelect+0x8>
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	08 95       	ret

000000ee <spi_slaveDeSelect>:
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <spi_slaveDeSelect+0xc>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <spi_slaveDeSelect+0x8>
  fe:	29 2b       	or	r18, r25
 100:	28 bb       	out	0x18, r18	; 24
 102:	08 95       	ret

00000104 <displayDriverInit>:
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	e7 df       	rcall	.-50     	; 0xd6 <spi_slaveSelect>
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	e1 df       	rcall	.-62     	; 0xce <spi_write>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	df df       	rcall	.-66     	; 0xce <spi_write>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	ed df       	rcall	.-38     	; 0xee <spi_slaveDeSelect>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	df df       	rcall	.-66     	; 0xd6 <spi_slaveSelect>
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	d9 df       	rcall	.-78     	; 0xce <spi_write>
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	d7 df       	rcall	.-82     	; 0xce <spi_write>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e5 df       	rcall	.-54     	; 0xee <spi_slaveDeSelect>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	d7 df       	rcall	.-82     	; 0xd6 <spi_slaveSelect>
 128:	8b e0       	ldi	r24, 0x0B	; 11
 12a:	d1 df       	rcall	.-94     	; 0xce <spi_write>
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	cf df       	rcall	.-98     	; 0xce <spi_write>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	dd df       	rcall	.-70     	; 0xee <spi_slaveDeSelect>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	cf df       	rcall	.-98     	; 0xd6 <spi_slaveSelect>
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	c9 df       	rcall	.-110    	; 0xce <spi_write>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	c7 df       	rcall	.-114    	; 0xce <spi_write>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	d5 cf       	rjmp	.-86     	; 0xee <spi_slaveDeSelect>
 144:	08 95       	ret

00000146 <spi_writeWord>:
}

void spi_writeWord ( unsigned char adress, unsigned char data ){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	d8 2f       	mov	r29, r24
 14c:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0); // Select display chip
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	c2 df       	rcall	.-124    	; 0xd6 <spi_slaveSelect>
	spi_write(adress); // Register 0A: Intensity
 152:	8d 2f       	mov	r24, r29
 154:	bc df       	rcall	.-136    	; 0xce <spi_write>
	spi_write(data); // -> Level 4 (in range [1..F])
 156:	8c 2f       	mov	r24, r28
 158:	ba df       	rcall	.-140    	; 0xce <spi_write>
	spi_slaveDeSelect(0); // Deselect display chip
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	c8 df       	rcall	.-112    	; 0xee <spi_slaveDeSelect>
 15e:	df 91       	pop	r29
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <writeLedDisplay>:
 164:	cf 92       	push	r12

void writeLedDisplay( int value ){
 166:	df 92       	push	r13
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	int idx = 1;
	if(value < 0) {
 174:	99 23       	and	r25, r25
 176:	34 f4       	brge	.+12     	; 0x184 <writeLedDisplay+0x20>
		spi_writeWord(4, 10);
 178:	6a e0       	ldi	r22, 0x0A	; 10
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	e4 df       	rcall	.-56     	; 0x146 <spi_writeWord>
		value = value *-1;
 17e:	d1 95       	neg	r29
 180:	c1 95       	neg	r28
 182:	d1 09       	sbc	r29, r1
	}
	while (value > 0) {
 184:	1c 16       	cp	r1, r28
 186:	1d 06       	cpc	r1, r29
 188:	a4 f4       	brge	.+40     	; 0x1b2 <writeLedDisplay+0x4e>
 18a:	11 e0       	ldi	r17, 0x01	; 1
		int digit = value % 10;
	spi_writeWord(idx, digit);
 18c:	0f 2e       	mov	r0, r31
 18e:	fa e0       	ldi	r31, 0x0A	; 10
 190:	cf 2e       	mov	r12, r31
 192:	d1 2c       	mov	r13, r1
 194:	f0 2d       	mov	r31, r0
 196:	ce 01       	movw	r24, r28
 198:	b6 01       	movw	r22, r12
 19a:	31 d0       	rcall	.+98     	; 0x1fe <__divmodhi4>
 19c:	f6 2e       	mov	r15, r22
 19e:	07 2f       	mov	r16, r23
 1a0:	68 2f       	mov	r22, r24
 1a2:	81 2f       	mov	r24, r17
 1a4:	d0 df       	rcall	.-96     	; 0x146 <spi_writeWord>
	value /= 10;
 1a6:	cf 2d       	mov	r28, r15
 1a8:	d0 2f       	mov	r29, r16
 1aa:	1f 5f       	subi	r17, 0xFF	; 255
	int idx = 1;
	if(value < 0) {
		spi_writeWord(4, 10);
		value = value *-1;
	}
	while (value > 0) {
 1ac:	1c 16       	cp	r1, r28
 1ae:	1d 06       	cpc	r1, r29
 1b0:	94 f3       	brlt	.-28     	; 0x196 <writeLedDisplay+0x32>
		int digit = value % 10;
	spi_writeWord(idx, digit);
	value /= 10;
	idx++;
}
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	ff 90       	pop	r15
 1bc:	df 90       	pop	r13
 1be:	cf 90       	pop	r12
 1c0:	08 95       	ret

000001c2 <main>:

int main()
{
 1c2:	cf 93       	push	r28
DDRB=0x01; // Set PB0 pin as output for display select
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	87 bb       	out	0x17, r24	; 23
spi_masterInit(); // Initialize spi module
 1c8:	7b df       	rcall	.-266    	; 0xc0 <spi_masterInit>
displayDriverInit(); // Initialize display chip
 1ca:	9c df       	rcall	.-200    	; 0x104 <displayDriverInit>
 1cc:	c1 e0       	ldi	r28, 0x01	; 1
// clear display (all zero's)
for (char i =1; i<=4; i++)
{
 spi_slaveSelect(0); // Select display chip
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	82 df       	rcall	.-252    	; 0xd6 <spi_slaveSelect>
 spi_write(i); // digit adress: (digit place)
 1d2:	8c 2f       	mov	r24, r28
 1d4:	7c df       	rcall	.-264    	; 0xce <spi_write>
 spi_write(0); // digit value: 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	7a df       	rcall	.-268    	; 0xce <spi_write>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 spi_slaveDeSelect(0); // Deselect display chip
 1dc:	88 df       	rcall	.-240    	; 0xee <spi_slaveDeSelect>
 1de:	cf 5f       	subi	r28, 0xFF	; 255
{
DDRB=0x01; // Set PB0 pin as output for display select
spi_masterInit(); // Initialize spi module
displayDriverInit(); // Initialize display chip
// clear display (all zero's)
for (char i =1; i<=4; i++)
 1e0:	c5 30       	cpi	r28, 0x05	; 5
 1e2:	a9 f7       	brne	.-22     	; 0x1ce <main+0xc>
 spi_slaveSelect(0); // Select display chip
 spi_write(i); // digit adress: (digit place)
 spi_write(0); // digit value: 0
 spi_slaveDeSelect(0); // Deselect display chip
}
wait(1000);
 1e4:	88 ee       	ldi	r24, 0xE8	; 232
 1e6:	93 e0       	ldi	r25, 0x03	; 3
 1e8:	5a df       	rcall	.-332    	; 0x9e <wait>

writeLedDisplay(-648);
 1ea:	88 e7       	ldi	r24, 0x78	; 120
 1ec:	9d ef       	ldi	r25, 0xFD	; 253
 1ee:	ba df       	rcall	.-140    	; 0x164 <writeLedDisplay>
 1f0:	88 ee       	ldi	r24, 0xE8	; 232
spi_write(i); // digit adress: (digit place)
spi_write(i); // digit value: i (= digit place)
spi_slaveDeSelect(0); // Deselect display chip
wait(1000);
 }*/
wait(1000);
 1f2:	93 e0       	ldi	r25, 0x03	; 3
 1f4:	54 df       	rcall	.-344    	; 0x9e <wait>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 return (1);
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <__divmodhi4>:
 1fe:	97 fb       	bst	r25, 7
 200:	07 2e       	mov	r0, r23
 202:	16 f4       	brtc	.+4      	; 0x208 <__divmodhi4+0xa>
 204:	00 94       	com	r0
 206:	06 d0       	rcall	.+12     	; 0x214 <__divmodhi4_neg1>
 208:	77 fd       	sbrc	r23, 7
 20a:	08 d0       	rcall	.+16     	; 0x21c <__divmodhi4_neg2>
 20c:	0b d0       	rcall	.+22     	; 0x224 <__udivmodhi4>
 20e:	07 fc       	sbrc	r0, 7
 210:	05 d0       	rcall	.+10     	; 0x21c <__divmodhi4_neg2>
 212:	3e f4       	brtc	.+14     	; 0x222 <__divmodhi4_exit>

00000214 <__divmodhi4_neg1>:
 214:	90 95       	com	r25
 216:	81 95       	neg	r24
 218:	9f 4f       	sbci	r25, 0xFF	; 255
 21a:	08 95       	ret

0000021c <__divmodhi4_neg2>:
 21c:	70 95       	com	r23
 21e:	61 95       	neg	r22
 220:	7f 4f       	sbci	r23, 0xFF	; 255

00000222 <__divmodhi4_exit>:
 222:	08 95       	ret

00000224 <__udivmodhi4>:
 224:	aa 1b       	sub	r26, r26
 226:	bb 1b       	sub	r27, r27
 228:	51 e1       	ldi	r21, 0x11	; 17
 22a:	07 c0       	rjmp	.+14     	; 0x23a <__udivmodhi4_ep>

0000022c <__udivmodhi4_loop>:
 22c:	aa 1f       	adc	r26, r26
 22e:	bb 1f       	adc	r27, r27
 230:	a6 17       	cp	r26, r22
 232:	b7 07       	cpc	r27, r23
 234:	10 f0       	brcs	.+4      	; 0x23a <__udivmodhi4_ep>
 236:	a6 1b       	sub	r26, r22
 238:	b7 0b       	sbc	r27, r23

0000023a <__udivmodhi4_ep>:
 23a:	88 1f       	adc	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	5a 95       	dec	r21
 240:	a9 f7       	brne	.-22     	; 0x22c <__udivmodhi4_loop>
 242:	80 95       	com	r24
 244:	90 95       	com	r25
 246:	bc 01       	movw	r22, r24
 248:	cd 01       	movw	r24, r26
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
